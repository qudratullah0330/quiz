{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React from 'react';\nimport { WebView } from 'react-native-webview';\nimport * as FileSystem from 'expo-file-system';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction PdfView(_ref) {\n  var route = _ref.route;\n  var checkFileExistence = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var fileInfo = yield FileSystem.getInfoAsync(route.params.pdfUri);\n      if (fileInfo.exists) {\n        console.log('PDF file exists:', route.params.pdfUri);\n      } else {\n        console.log('PDF file does not exist:', route.params.pdfUri);\n      }\n    });\n    return function checkFileExistence() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  React.useEffect(function () {\n    checkFileExistence();\n  }, []);\n  return _jsx(WebView, {\n    style: {\n      flex: 1\n    },\n    source: {\n      html: `\n          <iframe src=\"file://${route.params.pdfUri}\" width=\"100%\" height=\"100%\" frameborder=\"0\"></iframe>\n        `\n    }\n  });\n}\nexport default PdfView;","map":{"version":3,"names":["React","WebView","FileSystem","jsx","_jsx","PdfView","_ref","route","checkFileExistence","_ref2","_asyncToGenerator","fileInfo","getInfoAsync","params","pdfUri","exists","console","log","apply","arguments","useEffect","style","flex","source","html"],"sources":["E:/React native course video/Test/NotesApp/Screens/PdfView.js"],"sourcesContent":["import React from 'react';\r\nimport { WebView } from 'react-native-webview';\r\nimport * as FileSystem from 'expo-file-system';\r\n\r\nfunction PdfView({ route }) {\r\n  const checkFileExistence = async () => {\r\n    const fileInfo = await FileSystem.getInfoAsync(route.params.pdfUri);\r\n    if (fileInfo.exists) {\r\n      console.log('PDF file exists:', route.params.pdfUri);\r\n    } else {\r\n      console.log('PDF file does not exist:', route.params.pdfUri);\r\n      // Handle the case where the file doesn't exist\r\n    }\r\n  };\r\n\r\n  // Call the function to check file existence when the component mounts\r\n  React.useEffect(() => {\r\n    checkFileExistence();\r\n  }, []);\r\n\r\n  return (\r\n    <WebView\r\n      style={{ flex: 1 }}\r\n      source={{\r\n        html: `\r\n          <iframe src=\"file://${route.params.pdfUri}\" width=\"100%\" height=\"100%\" frameborder=\"0\"></iframe>\r\n        `,\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PdfView;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,OAAO,KAAKC,UAAU,MAAM,kBAAkB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAE/C,SAASC,OAAOA,CAAAC,IAAA,EAAY;EAAA,IAATC,KAAK,GAAAD,IAAA,CAALC,KAAK;EACtB,IAAMC,kBAAkB;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;MACrC,IAAMC,QAAQ,SAAST,UAAU,CAACU,YAAY,CAACL,KAAK,CAACM,MAAM,CAACC,MAAM,CAAC;MACnE,IAAIH,QAAQ,CAACI,MAAM,EAAE;QACnBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEV,KAAK,CAACM,MAAM,CAACC,MAAM,CAAC;MACtD,CAAC,MAAM;QACLE,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEV,KAAK,CAACM,MAAM,CAACC,MAAM,CAAC;MAE9D;IACF,CAAC;IAAA,gBARKN,kBAAkBA,CAAA;MAAA,OAAAC,KAAA,CAAAS,KAAA,OAAAC,SAAA;IAAA;EAAA,GAQvB;EAGDnB,KAAK,CAACoB,SAAS,CAAC,YAAM;IACpBZ,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,OACEJ,IAAA,CAACH,OAAO;IACNoB,KAAK,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAE;IACnBC,MAAM,EAAE;MACNC,IAAI,EAAG;AACf,gCAAgCjB,KAAK,CAACM,MAAM,CAACC,MAAO;AACpD;IACM;EAAE,CACH,CAAC;AAEN;AAEA,eAAeT,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}